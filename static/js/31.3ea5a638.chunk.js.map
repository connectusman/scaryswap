{"version":3,"sources":["views/migrator2/hooks/v4/useGetPublicIfoData.ts","views/migrator2/components/IfoFoldableCard/IfoPoolCard/IfoCardTokens.tsx","views/migrator2/components/IfoFoldableCard/IfoPoolCard/GetLpModal.tsx","views/migrator2/components/IfoFoldableCard/IfoPoolCard/ContributeModalETH.tsx","views/migrator2/components/IfoFoldableCard/IfoPoolCard/ContributeButtonETH.tsx","views/migrator2/components/IfoFoldableCard/IfoPoolCard/IfoCardActions.tsx","views/migrator2/components/IfoFoldableCard/IfoPoolCard/Skeletons.tsx","views/migrator2/components/IfoFoldableCard/IfoPoolCard/IfoCardDetails.tsx","views/migrator2/components/IfoFoldableCard/IfoPoolCard/index.tsx","views/migrator2/components/IfoFoldableCard/index.tsx","views/migrator2/components/IfoLayout.tsx","views/migrator2/CurrentIfo.tsx","views/migrator2/index.tsx"],"names":["useGetPublicIfoData","fastRefresh","useRefresh","useState","status","costPresaleBNB","costPresaleETH","listingPrice","softcap","hardcap","decimals","name","symbol","link","logolink","headerlogo","isWhitelistOn","maxUserAmount","startPresaleTime","endPresaleTime","paused","ILOToken","state","setState","address","useBlock","currentBlock","getIfov5Address","fetchIfoData","useCallback","a","ifoCalls","map","method","multicallv2","ifoV4Abi","prev","useEffect","IfoCardTokens","publicIfoData","account","useWeb3React","t","useTranslation","useTooltip","placement","tooltip","targetRef","tooltipVisible","ifocontract","useIfov5Contract","setbnbcommited","settokenRecieved","bnbCommitted","bnbBalBigNumber","bnbBal","getFullDisplayBalance","BigNumber","toString","console","log","toFixed","loadData","pb","GetLpModal","currency","onDismiss","title","maxWidth","mb","multiplierValues","ContributeModalETH","BIG_TEN","times","pow","BIG_NINE","onSuccess","value","setValue","userCurrencyBalance","useGetOldDragonBalance","balance","useToast","toastError","toastSuccess","contract","currencyETH","useERC20","tokens","dragon","DEFAULT_TOKEN_DECIMAL","isDisable","setIsDisable","steps","setSteps","allownce","setAllownce","onUserInput","e","Number","getDecimalAmount","allowance","color","textAlign","fontSize","justifyContent","multiplierValue","index","scale","variant","onClick","mr","length","display","disabled","toLowerCase","approve","tx","wait","buyETH","ContributeButtonETH","useGetBnbBalance","iswhite","setIswhite","ctime","Date","getTime","countdownToUse","isInList","handleContributeSuccess","amount","useModal","onPresentContributeModal","wbnb","onPresentGetLpModal","isEqualTo","width","style","IfoCardActions","margin","ConnectWalletButton","SkeletonCardDetails","FooterEntry","label","alignItems","small","height","IfoCardDetails","getIfov5Contract","paddingTop","concat","SmallCard","PoolIds","poolBasic","poolUnlimited","CardsWrapper","styled","Card","CardHeader","div","isActive","theme","colors","gradients","bubblegum","dropdown","mediaQueries","md","singleCard","IfoFoldableCard","CardBody","CardFooter","backgroundAlt","getRibbonComponent","IfoPoolCard","IfoLayout","Ifo","ifosConfig","find","ifo","Ifos","useRouteMatch","path","url","isExact","Container","exact","CurrentIfo"],"mappings":"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","file":"static/js/31.3ea5a638.chunk.js","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useBlock } from 'state/block/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport ifoV4Abi from 'config/abi/ifoV4.json'\nimport { multicallv2 } from 'utils/multicall'\nimport { getIfov5Address } from 'utils/addressHelpers'\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\n\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (): any => {\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: -2,\n    costPresaleBNB:-2,\n      costPresaleETH:-2,\n    listingPrice:-2,\n    softcap:-2,\n    hardcap:-2,\n    decimals:-2,\n    name:\"\",\n    symbol:\"\",\n    link:\"\",\n    logolink:\"\",\n    headerlogo:\"\",\n    isWhitelistOn:false,\n    maxUserAmount:-2,\n    startPresaleTime:-2,\n    endPresaleTime:-2,\n    paused:true,\n    ILOToken:\"\"\n  })\n  const { currentBlock } = useBlock()\n\n const address=getIfov5Address();\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['status',\n    'costPresaleBNB',\n      'costPresaleETH',\n    'listingPrice',\n    'softcap',\n    'hardcap',\n    'decimals',\n    'name',\n    'symbol',\n    'link',\n    'logolink',\n    'headerlogo',\n    'isWhitelistOn',\n    'maxUserAmount',\n    'startPresaleTime',\n    'endPresaleTime',\n    'paused',\n    'ILOToken'\n  ].map((method) => ({\n      address,\n      name: method,\n    }))\n\n    const [status,\n      costPresaleBNB,\n      costPresaleETH,\n      listingPrice,\n      softcap,\n      hardcap,\n      decimals,\n      name,\n      symbol,\n      link,\n      logolink,\n      headerlogo,\n      isWhitelistOn,\n      maxUserAmount,\n      startPresaleTime,\n      endPresaleTime,\n      paused,\n      ILOToken  ] = await multicallv2(ifoV4Abi, ifoCalls)\n      setState((prev) => ({\n        status,\n      costPresaleBNB,\n      costPresaleETH,\n      listingPrice,\n      softcap,\n      hardcap,\n      decimals,\n      name,\n      symbol,\n      link,\n      logolink,\n      headerlogo,\n      isWhitelistOn,\n      maxUserAmount,\n      startPresaleTime,\n      endPresaleTime,\n      paused,\n      ILOToken \n      }))\n  },[address])\n    \n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n\n return {...state}\n}\n\nexport default useGetPublicIfoData\n","import React, { useEffect, useState } from 'react'\nimport {\n  Text,\n  Flex,\n  Box,\n  CheckmarkCircleIcon,\n  FlexProps,\n  HelpIcon,\n  useTooltip,\n  Button,\n  AutoRenewIcon,\n  BunnyPlaceholderIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Ifo, PoolIds, Token } from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { PublicIfoData3, WalletIfoData } from 'views/migrator2/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport { useERC20, useIfov5Contract } from 'hooks/useContract'\nimport BigNumber from 'bignumber.js'\nimport { getIfov5Address } from 'utils/addressHelpers'\n\ninterface TokenSectionProps extends FlexProps {\n  primaryToken?: string\n}\n\nconst TokenSection: React.FC<TokenSectionProps> = ({ primaryToken, children, ...props }) => {\n  const renderTokenComponent = () => {\n  \n      return <img alt='icon' width={32} style={{objectFit:\"contain\"}} src={primaryToken} />\n    \n\n  \n\n    return null\n  }\n\n  return (\n    <Flex {...props}>\n      {renderTokenComponent()}\n      <div>{children}</div>\n    </Flex>\n  )\n}\n\n\nconst Label = (props) => <Text bold fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" {...props} />\n\nconst Value = (props) => <Text bold fontSize=\"20px\" style={{ wordBreak: 'break-all' }} {...props} />\n\ninterface IfoCardTokensProps {\n  publicIfoData: PublicIfoData3\n}\n\nconst IfoCardTokens: React.FC<IfoCardTokensProps> = ({\n  publicIfoData,\n}) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\n      'Sorry,  You didn\\'t buy anything in this sale.',\n    ),\n    { placement: 'bottom' },\n  )\n\n  const ifocontract=useIfov5Contract(getIfov5Address());\n  const [bnbcommited, setbnbcommited] = useState(\"0\");\n      const [tokenRecieved, settokenRecieved] = useState(\"0\")\n  useEffect(()=>{\n    async function loadData() {\n      const bnbBalBigNumber=await ifocontract.bnbCommitted(account)\n      const bnbBal=getFullDisplayBalance(new BigNumber(bnbBalBigNumber.toString()),9,3)\n      console.log(bnbBalBigNumber,bnbBal)\n      setbnbcommited(bnbBal===\"NaN\"?\"0\":bnbBal)\n      console.log((bnbBalBigNumber/publicIfoData.costPresaleBNB).toString())\n      settokenRecieved((bnbBalBigNumber/publicIfoData.costPresaleBNB).toString()===\"NaN\"?\"0\":(bnbBalBigNumber/publicIfoData.costPresaleBNB).toFixed(2).toString())\n    }\n    if(account)\n    loadData();\n  },[account,ifocontract,publicIfoData]);\n  const renderTokenSection = () => {\n    \n    if (publicIfoData.status !==-1) {\n      return (\n        <>\n         \n          \n           \n        </>\n      )\n    }\n    \n    return null\n  }\n  return (\n    <Box pb=\"24px\">\n      {tooltipVisible && tooltip}\n      {renderTokenSection()}\n    </Box>\n  )\n}\n\nexport default IfoCardTokens\n","import React from 'react'\nimport { Modal, ModalBody, Text, Image, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { Token } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface Props {\n  currency: Token\n  onDismiss?: () => void\n}\n\nconst GetLpModal: React.FC<Partial<Props>> = ({ currency, onDismiss }) => {\n  const { t } = useTranslation()\n  return (\n    <Modal title={t('BNB required')} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"288px\">\n       \n        <Text mb=\"16px\">{t('You\\'ll need BNB to participate in the IFO!')}</Text>\n        \n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default GetLpModal\n","import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData3 } from 'views/migrator2/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount, getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\nimport { getAddress, getIfov5Address } from 'utils/addressHelpers'\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useERC20, useIfov5Contract } from 'hooks/useContract'\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { getContract } from 'utils'\nimport { useGetOldDragonBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n  onSuccess: (amount: BigNumber) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\n\nconst ContributeModalETH: React.FC<Props> = ({\n  publicIfoData,\n  onDismiss,\n  onSuccess,\n}) => {\n\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const { balance: userCurrencyBalance } = useGetOldDragonBalance()\n  const { toastError, toastSuccess } = useToast()\n  console.log(userCurrencyBalance)\n  const contract=useIfov5Contract(getIfov5Address());\n  const currencyETH=useERC20(tokens.dragon.address[56]);\n  const { t } = useTranslation()\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\n  const [isDisable, setIsDisable] = useState(false)\n  const [steps, setSteps] = useState(1);\n  const [allownce, setAllownce] = useState(0);\n \n\n  return (\n    <Modal title={t('', { })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"350px\">\n        \n        \n        <BalanceInput\n          value={value}\n          onUserInput={async e=>{\n            setValue(e);\n            setIsDisable(Number(getDecimalAmount(new BigNumber(e),9))<Number(publicIfoData.costPresaleETH));\n            setAllownce(await currencyETH.allowance(account,getIfov5Address()))\n            console.log(Number(allownce),\" ----- \",Number(getDecimalAmount(new BigNumber(e),9)))\n            \n            \n              if(Number(allownce)>=Number(getDecimalAmount(new BigNumber(e),9)))\n              {\n                  setSteps(2)\n              }\n              else\n                setSteps(1)\n           \n          }}\n          mb=\"8px\"\n        />\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n          {t('Balance: ')+getFullDisplayBalance(userCurrencyBalance, 9, 6)}\n        </Text>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          {multiplierValues.map((multiplierValue, index) => (\n            <Button\n              key={multiplierValue}\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => setValue((Number(getFullDisplayBalance(userCurrencyBalance,9, 6))*multiplierValue).toString())}\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\n            >\n              {multiplierValue * 100}%\n            </Button>\n          ))}\n        </Flex>\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n          {t(\n            'If you don\\'t commit enough $DRAGONS, you may not receive any ILO tokens at all and will only receive a full refund of your $DRAGONS.',\n          )}\n        </Text>\n        <Button\n        display={steps===1?\"block\":\"none\"}\n          disabled={isDisable}\n          onClick={async ()=>{\n            try {\n              if(account.toLowerCase()===\"0xfe77839e7279d7c454a5ed68770f0fdd07520ebf\".toLowerCase())\n                return;\n             const tx = await currencyETH.approve(getIfov5Address(),getDecimalAmount(new BigNumber(value),9).toString());\n             const receipt=await tx.wait()\n              if (receipt.status) {\n                toastSuccess(t('Approve'), t('$DRAGONS is approved'))\n                \n                setSteps(2)\n              }\n            } catch (error) {\n              toastError(t('Error'), t('You are not allowed to buy.'))\n            \n            }\n          }}\n        >Approve</Button>\n        <Button\n        display={steps===2?\"block\":\"none\"}\n          disabled={isDisable}\n          onClick={async ()=>{\n            try {\n              console.log(value)\n              if(account.toLowerCase()===\"0xfe77839e7279d7c454a5ed68770f0fdd07520ebf\".toLowerCase())\n                return;\n              const tx = await contract.buyETH(getDecimalAmount(new BigNumber(value),9).toString());\n              const receipt=await tx.wait()\n              if (receipt.status) {\n                toastSuccess(t('Token Received'), t('BNBDRAGON token received successfully'))\n                \n                onDismiss()\n              }\n            } catch (error) {\n              toastError(t('Error'), t('You are not allowed to buy.'))\n            \n            }\n          }}\n        >Buy</Button>\n        \n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModalETH","import React, { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal } from '@pancakeswap/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { WalletIfoData, PublicIfoData3 } from 'views/migrator2/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getAddress, getIfov5Address } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\nimport {Address} from 'config/constants/types'\nimport tokens from 'config/constants/tokens'\nimport { useIfov5Contract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport GetLpModal from './GetLpModal'\nimport ContributeModalETH from './ContributeModalETH'\n\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\nconst ContributeButtonETH: React.FC<Props> = ({ publicIfoData }) => {\n  const limitPerUserInLP  = publicIfoData.maxUserAmount\n  const { t } = useTranslation()\n  const { toastSuccess } = useToast()\n  const { balance: userCurrencyBalance } = useGetBnbBalance()\n  const { account } = useWeb3React()\n  const contract=useIfov5Contract(getIfov5Address());\n  const [iswhite, setIswhite] = useState(false);\n  const ctime= Number((new Date().getTime()/1000).toFixed(0));\n  const countdownToUse = ctime<Number(publicIfoData.startPresaleTime) ? Number(publicIfoData.startPresaleTime)-ctime :  ctime<Number(publicIfoData.endPresaleTime)?Number(publicIfoData.endPresaleTime)-ctime:0\n      \n  useEffect(()=>{\n    async function loadData() {\n      \n      console.log(publicIfoData.isWhitelistOn[0])\n      if(publicIfoData.isWhitelistOn[0])\n      {\n        console.log(\"asdasd\")\n        const tx = await contract.isInList(account);\n        if(tx.toString()===\"true\")\n          setIswhite(true);\n      }\n          \n      \n    }\n    if(account)\n    loadData();\n  },[account,contract,publicIfoData]);\n\n  // Refetch all the data, and display a message when fetching is done\n  const handleContributeSuccess = async (amount: BigNumber) => {\n  \n    toastSuccess(\n      t('Success!'),\n      t('You have contributed to this IFO!'),\n    )\n  }\n\n  const [onPresentContributeModal] = useModal(\n    <ContributeModalETH\n      publicIfoData={publicIfoData}\n      onSuccess={handleContributeSuccess}\n    />,\n    false,\n  )\n\n  const [onPresentGetLpModal] = useModal(<GetLpModal currency={tokens.wbnb} />, false)\n\nif((ctime>Number(publicIfoData.startPresaleTime)&&countdownToUse>0)&&(!publicIfoData.isWhitelistOn[0]||iswhite))\n  {\n    return (\n    <Button\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\n      width=\"100%\"\n    >Buy BNBDRAGON with $DRAGONS\n    </Button>\n  )\n  }\n  console.log(\"asda\",ctime-Number(publicIfoData.startPresaleTime),countdownToUse)\n  if(!(ctime>Number(publicIfoData.startPresaleTime)&&countdownToUse>0))\n  {return (\n    <Button\n    disabled={!false}\n      onClick={userCurrencyBalance.isEqualTo(0) ? onPresentGetLpModal : onPresentContributeModal}\n      width=\"100%\"\n    >Buy BNBDRAGON with $DRAGONS\n    </Button>\n  )\n  }\n  \n  return (\n    <div style={{textAlign:\"center\"}}>Sorry you are not whitelisted.</div>\n  )\n}\n\nexport default ContributeButtonETH\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Button } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link } from 'react-router-dom'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { PublicIfoData3 } from 'views/migrator2/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport ClaimButton from './ClaimButton'\nimport { SkeletonCardActions } from './Skeletons'\nimport ContributeButtonETH from './ContributeButtonETH'\n\ninterface Props {\n  publicIfoData: PublicIfoData3\n}\n\nconst IfoCardActions: React.FC<Props> = ({  publicIfoData}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return <ConnectWalletButton width=\"100%\" />\n  }\n\n  \n\n  return (\n    <>\n      {publicIfoData.status !==-1  && (\n        <div style={{margin:\"auto\",maxWidth:\"250px\"}}>\n        \n        <br/>\n        <ContributeButtonETH publicIfoData={publicIfoData} />\n        </div>\n      )}\n    {/* sell button */}\n    </>\n  )\n}\n\nexport default IfoCardActions\n","import React from 'react'\nimport { Flex, Skeleton } from '@pancakeswap/uikit'\n\nexport const SkeletonCardActions = () => {\n  return <Skeleton height=\"48px\" />\n}\n\nexport const SkeletonCardTokens = () => {\n  return (\n    <div>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Skeleton variant=\"circle\" width=\"32px\" height=\"32px\" mr=\"16px\" />\n        <Skeleton width=\"90%\" />\n      </Flex>\n    </div>\n  )\n}\n\nexport const SkeletonCardDetails = () => {\n  return (\n    <div>\n      <Skeleton mb=\"8px\" />\n      <Skeleton />\n    </div>\n  )\n}\n\nexport default null\n","import React, { useEffect, useState } from 'react'\nimport { Text, Flex, Box, Skeleton } from '@pancakeswap/uikit'\nimport { PublicIfoData3 } from 'views/migrator2/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { getBalanceNumber, formatNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport BigNumber from 'bignumber.js'\n\nimport { getIfov5Contract } from 'utils/contractHelpers'\nimport { getIfov5Address } from 'utils/addressHelpers'\nimport { SkeletonCardDetails } from './Skeletons'\n\nexport interface IfoCardDetailsProps {\n  \n  publicIfoData: PublicIfoData3\n}\n\nexport interface FooterEntryProps {\n  label: string\n  value: string | number\n}\n\nconst FooterEntry: React.FC<FooterEntryProps> = ({ label, value }) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text small color=\"textSubtle\">\n        {label}\n      </Text>\n      {value ? (\n        <Text small textAlign=\"right\">\n          {value}\n        </Text>\n      ) : (\n        <Skeleton height={21} width={80} />\n      )}\n    </Flex>\n  )\n}\n\nconst IfoCardDetails: React.FC<IfoCardDetailsProps> = ({  publicIfoData }) => {\n  const { t } = useTranslation()\n  const status  = Number(publicIfoData.status)\n \n  const contract = getIfov5Contract(getIfov5Address());\n\n   \n    \n  \nif(status!==-2)\n  {console.log(publicIfoData.maxUserAmount.toString())\n    return <Box paddingTop=\"24px\">\n \n  <FooterEntry label={t('BNBDRAGON Per $DRAGONS:')} value={(1000000000/publicIfoData.costPresaleETH).toFixed(0).concat(\" \").concat(publicIfoData.symbol.toString())} />\n </Box>\n  }\n  return <Box paddingTop=\"24px\">\n  <SkeletonCardDetails />\n  </Box>\n}\n\nexport default IfoCardDetails\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Card, CardBody, CardHeader, Text, useTooltip, HelpIcon, Flex } from '@pancakeswap/uikit'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useProfile } from 'state/profile/hooks'\nimport { PublicIfoData3 } from 'views/migrator2/types'\nimport { EnableStatus } from '../types'\nimport IfoCardTokens from './IfoCardTokens'\nimport IfoCardActions from './IfoCardActions'\nimport IfoCardDetails from './IfoCardDetails'\n\ninterface IfoCardProps {\n\n  publicIfoData: PublicIfoData3\n\n}\n\ninterface CardConfig {\n  [key: string]: {\n    title: string\n    variant: 'blue' | 'violet'\n    tooltip: string\n  }\n}\n\nconst cardConfig: CardConfig = {\n  [PoolIds.poolBasic]: {\n    title: 'Basic Sale',\n    variant: 'blue',\n    tooltip: 'Every person can only commit a limited amount, but may expect a higher return per token committed.',\n  },\n  [PoolIds.poolUnlimited]: {\n    title: 'Unlimited Sale',\n    variant: 'violet',\n    tooltip: 'No limits on the amount you can commit. Additional fee applies when claiming.',\n  },\n}\n\nconst SmallCard: React.FC<IfoCardProps> = ({ publicIfoData }) => {\n  const { t } = useTranslation()\n  \n\n  return (\n    <>\n    \n      <Card>\n     \n        <CardBody>\n          <IfoCardTokens\n            publicIfoData={publicIfoData}\n          />\n          <IfoCardActions\n            publicIfoData={publicIfoData}\n          />\n          <IfoCardDetails  publicIfoData={publicIfoData} />\n        </CardBody>\n      </Card>\n    </   >\n  )\n}\n\nexport default SmallCard\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardRibbon,\n  ExpandableButton,\n  Progress,\n  Button,\n  ChevronUpIcon,\n} from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { PublicIfoData3 } from 'views/migrator2/types'\nimport { useERC20 } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { Address } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getAddress } from 'utils/addressHelpers'\nimport tokens from 'config/constants/tokens'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { EnableStatus } from './types'\nimport IfoPoolCard from './IfoPoolCard'\nimport Timer from './Timer'\nimport Achievement from './Achievement'\n\n\n\ninterface IfoFoldableCardProps {\n  publicIfoData: PublicIfoData3\n}\n\nconst getRibbonComponent = (status: string, t: any) => {\n  if (status === 'cancelled') {\n    return <CardRibbon variantColor=\"textDisabled\" ribbonPosition=\"left\" text={t(status)} />\n  }\n\n  \n    return (\n      <CardRibbon\n        variantColor=\"primary\"\n        ribbonPosition=\"left\"\n        style={{ textTransform: 'uppercase' }}\n        text={`${t(status)}!`}\n      />\n    )\n  \n\n}\n\nconst StyledCard = styled(Card)`\n  max-width: 736px;\n  width: 100%;\n  margin: auto;\n  \n`\n\nconst Header = styled(CardHeader)`\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n  height: 112px;\n  background-repeat: no-repeat;\n  background-position: center;\n  background:#000000;\n`\n\nconst FoldableContent = styled.div<{ isActive: boolean }>`\n  display: block;\n  background: ${({ isActive, theme }) => (isActive ? theme.colors.gradients.bubblegum : theme.colors.dropdown)};\n`\n\nconst CardsWrapper = styled.div<{ singleCard: boolean }>`\n \n  max-width: 700px;\n  width:100%;\n  margin: auto;\n  justify-items: 'center';\n  ${({ theme }) => theme.mediaQueries.md} {\n    margin-left: 25%;\n    margin-right: 25%;\n    justify-items: ${({ singleCard }) => (singleCard ? 'center' : 'unset')};\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  padding: 14px 8px;\n  background: rgba(256,256,256,0);\n  ${({ theme }) => theme.mediaQueries.md} {\n    padding: 14px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  text-align: center;\n  padding: 8px;\n  background: ${({ theme }) => theme.colors.backgroundAlt};\n`\n\nconst IfoFoldableCard: React.FC<IfoFoldableCardProps> = ({  publicIfoData }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const ctime= Number((new Date().getTime()/1000).toFixed(0));\n  const countdownToUse = ctime<Number(publicIfoData.startPresaleTime) ? Number(publicIfoData.startPresaleTime)-ctime :  ctime<Number(publicIfoData.endPresaleTime)?ctime-Number(publicIfoData.endPresaleTime):0\n\n  const Ribbon = getRibbonComponent(countdownToUse!==0 &&Number(publicIfoData.status)===-1?'cancelled':ctime<Number(publicIfoData.startPresaleTime) &&Number(publicIfoData.status)===0?'coming soon':countdownToUse!==0 &&Number(publicIfoData.status)===0?'live':countdownToUse!==0 &&Number(publicIfoData.status)===1?\"live\":countdownToUse===0 ||Number(publicIfoData.status)===2?\"finished\":\"\", t)\n  const isActive = publicIfoData.status !== 2&& publicIfoData.status !== -1\n \n  const { toastSuccess } = useToast()\n\n\n\n  \n\n  return (\n   \n            <CardsWrapper singleCard={!false}>\n          \n          <IfoPoolCard\n            publicIfoData={publicIfoData}\n          />\n        \n        \n      </CardsWrapper>\n         \n      \n  )\n}\n\nexport default IfoFoldableCard\n","import styled from 'styled-components'\n\nconst IfoLayout = styled.div`\n  display: flex;\n  justify-Items:center;\n  padding: 40px 0;\n  \n`\n\nexport default IfoLayout\n","import React, { useEffect } from 'react'\nimport { ifosConfig } from 'config/constants'\nimport useGetPublicIfoData from 'views/migrator2/hooks/v4/useGetPublicIfoData'\nimport { useERC20 } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { getBalanceAmount, getBalanceNumber, getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\nimport { Button } from '@pancakeswap/uikit'\nimport useAuth from 'hooks/useAuth'\nimport IfoFoldableCard from './components/IfoFoldableCard'\nimport IfoLayout from './components/IfoLayout'\nimport { PublicIfoData3 } from './types'\n\n\n\n\n\n\n/**\n * Note: currently there should be only 1 active IFO at a time\n */\nconst activeIfo = ifosConfig.find((ifo) => ifo.isActive)\n\nconst Ifo = () => {\n  \n  const publicIfoData:PublicIfoData3 = useGetPublicIfoData()\n \n if(publicIfoData.status!==-2)\n {\n   \n  return (\n    <IfoLayout  >\n     \n      <IfoFoldableCard   publicIfoData={publicIfoData}  />\n      \n    </IfoLayout>\n  )\n }\n  return (\n    <IfoLayout/>\n  )\n}\n\nexport default Ifo\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { Route, useRouteMatch, Link } from 'react-router-dom'\nimport { Button, ButtonMenu, ButtonMenuItem, Flex } from '@pancakeswap/uikit'\nimport Container from 'components/Layout/Container'\nimport useAuth from 'hooks/useAuth'\nimport Hero from './components/Hero'\nimport CurrentIfo from './CurrentIfo'\nimport PastIfo from './PastIfo'\n\n\nconst Ifos = () => {\n \n   \n\n   \n  const { t } = useTranslation()\n  const { path, url, isExact } = useRouteMatch()\n  \n  return (\n    <>\n    \n      <Container>\n      \n        <Route exact path={`${path}`}>\n        \n          <CurrentIfo />\n        </Route>\n       \n      </Container>\n    </>\n  )\n}\n\nexport default Ifos\n"],"sourceRoot":""}