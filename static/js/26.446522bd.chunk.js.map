{"version":3,"sources":["views/Nft/staking/index.tsx"],"names":["StyledCard","styled","Card","FarmCardInnerContainer","Flex","div","theme","colors","cardBorder","ViewNFTs","t","useTranslation","account","useWeb3React","useToast","toastError","toastSuccess","useState","mystate","setMystate","hist","useHistory","wstakingcontract","useNftStakingContract","getNftStakingAddress","useEffect","a","contract","getDNFTContract","getDNFTAddress","gmarketcontract","getNftStakingContract","getList","res","console","log","alldata","i","tokenURI","tokenId","uri","axios","get","headers","resp","push","isActive","justifyContent","bold","Number","data","name","description","style","margin","width","controls","autoPlay","src","image","type","onClick","unstake","tx","wait","status","harvest","nam","desc","img","length","loadData","as","scale","color","mb","textAlign","display","flexWrap"],"mappings":"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","file":"static/js/26.446522bd.chunk.js","sourcesContent":["import { Button, Card, Flex, Heading, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport axios from 'axios'\r\n\r\nimport BigNumber from 'bignumber.js'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useDNFTContract, useERC20,  useNftStakingContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { startsWith } from 'lodash'\r\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport { getCakeAddress, getDNFTAddress,  getNftStakingAddress } from 'utils/addressHelpers'\r\nimport { getDNFTContract, getNftStakingContract } from 'utils/contractHelpers'\r\nimport { getBalanceAmount, getBalanceNumber, getDecimalAmount } from 'utils/formatBalance'\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: center;\r\n  display:block;\r\n  width:360px;\r\n  margin:10px;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  \r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\nclass NFTModal{\r\n\timage=\"\";\r\n\r\n\tdescription=\"\";\r\n\r\n\tname=\"\";\r\n\r\n\tid=\"\";\r\n}\r\n\r\nconst ViewNFTs: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const [mystate, setMystate] = useState<any>()\r\n  const hist=useHistory();\r\n  \r\n  const wstakingcontract=useNftStakingContract(getNftStakingAddress());\r\n\r\n  \r\n\r\n  useEffect(()=>{\r\n    \r\n      \r\n\r\n    async function loadData(){\r\n      const contract = getDNFTContract(getDNFTAddress());\r\n    \r\n      const gmarketcontract = getNftStakingContract(getNftStakingAddress());\r\n      if(gmarketcontract&&account)\r\n      {\r\n        const res=await gmarketcontract.getList(account)\r\n        console.log(\"sad \",res)\r\n        const alldata=[];\r\n        for(let i=0;i<res.length;i++)\r\n        {\r\n          console.log(\"sads \",res)\r\n            const uri=await contract.tokenURI(res[i].tokenId);\r\n            try{\r\n              const resp= await axios.get(uri,{\r\n                headers: {\r\n                    'content-type': 'application/json'\r\n                }\r\n            });\r\n            alldata.push(<StyledCard key={i} isActive={!false}>\r\n              <FarmCardInnerContainer>\r\n              <Flex justifyContent=\"space-between\">\r\n                  <Text>NFT Id:</Text>\r\n                  <Text bold>{Number(res[i].tokenId)}</Text>\r\n                </Flex>\r\n                <br/>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text>NFT Type:</Text>\r\n                  <Text bold>{resp.data.name}</Text>\r\n                </Flex>\r\n                <br/>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text>Desc:</Text>\r\n                  <Text bold>{resp.data.description}</Text>\r\n                </Flex>\r\n                <br/>\r\n                <video style={{margin:\"auto\"}} width=\"300\" controls autoPlay={!false}>\r\n            <source src={resp.data.image} type=\"video/mp4\"/>\r\n        </video>\r\n                \r\n                <br/>\r\n                <Flex justifyContent=\"space-between\">\r\n                <Button onClick={\r\n                  async ()=>{\r\n                    try {\r\n\r\n                      const tx = await wstakingcontract.unstake(res[i].tokenId);\r\n                       const receipt=await tx.wait()\r\n                        if (receipt.status) {\r\n                          toastSuccess(t('Unstaked'), t('NFT is unstaked from the pool'))\r\n                          \r\n                        }\r\n                      } catch (error) {\r\n                        toastError(t('Error'), t('You are not allowed.'))\r\n                        \r\n                      \r\n                      }\r\n                  }\r\n                }>Unstake</Button>\r\n                <Button onClick={\r\n                  async()=>{\r\n                    try {\r\n\r\n                      const tx = await wstakingcontract.harvest(res[i].tokenId);\r\n                       const receipt=await tx.wait()\r\n                        if (receipt.status) {\r\n                          toastSuccess(t('Harvested'), t('Reward is harvested and sent to your wallet'))\r\n                          \r\n                        }\r\n                      } catch (error) {\r\n                        toastError(t('Error'), t('You are not allowed.'))\r\n                        \r\n                      \r\n                      }\r\n                  }\r\n                }>Harvest</Button>\r\n                  \r\n                </Flex>\r\n                \r\n              </FarmCardInnerContainer>\r\n        \r\n              \r\n            </StyledCard>);\r\n          }\r\n          catch(e){\r\n            const resp={nam:\"N/A\",desc:\"N/A\",img:\"N/A\"};\r\n            alldata.push(<StyledCard key={i} isActive={!false}>\r\n              <FarmCardInnerContainer>\r\n                \r\n              <Flex justifyContent=\"space-between\">\r\n                  <Text>NFT Id:</Text>\r\n                  <Text bold>{Number(res[i].tokenId)}</Text>\r\n                </Flex>\r\n                <br/>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text>NFT Type:</Text>\r\n                  <Text bold>{resp.nam}</Text>\r\n                </Flex>\r\n                <br/>\r\n                <Flex justifyContent=\"space-between\">\r\n                  <Text>Desc:</Text>\r\n                  <Text bold>{resp.desc}</Text>\r\n                </Flex>\r\n                <br/>\r\n                <video style={{margin:\"auto\"}} width=\"300\" controls autoPlay={!false}>\r\n            <source src=\"/logo.mp4\" type=\"video/mp4\"/>\r\n        </video>\r\n        <br/>\r\n                \r\n                <Flex justifyContent=\"space-between\">\r\n                <Button onClick={\r\n                  async ()=>{\r\n                    try {\r\n\r\n                      const tx = await wstakingcontract.unstake(res[i].tokenId);\r\n                       const receipt=await tx.wait()\r\n                        if (receipt.status) {\r\n                          toastSuccess(t('Unstaked'), t('NFT is unstaked from the pool'))\r\n                          \r\n                        }\r\n                      } catch (error) {\r\n                        toastError(t('Error'), t('You are not allowed.'))\r\n                        \r\n                      \r\n                      }\r\n                  }\r\n                }>Unstake</Button>\r\n                <Button onClick={\r\n                  async()=>{\r\n                    try {\r\n                        console.log(Number(res[i].tokenId))\r\n                      const tx = await wstakingcontract.harvest(res[i].tokenId);\r\n                       const receipt=await tx.wait()\r\n                        if (receipt.status) {\r\n                          toastSuccess(t('Harvested'), t('Reward is harvested and sent to your wallet'))\r\n                          \r\n                        }\r\n                      } catch (error) {\r\n                        toastError(t('Error'), t('You are not allowed.'))\r\n                        \r\n                      \r\n                      }\r\n                  }\r\n                }>Harvest</Button>\r\n                </Flex>\r\n              </FarmCardInnerContainer>\r\n            </StyledCard>);\r\n          }\r\n            \r\n            \r\n        }\r\n         setMystate(alldata);\r\n      }\r\n    }\r\n    loadData();\r\n  },[t,toastSuccess,hist,wstakingcontract,account,toastError])\r\n\r\n \r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('NFT Staking')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Stake your NFTs and earn our tokens')}\r\n        </Heading>\r\n        \r\n      </PageHeader>\r\n      <Page style={{textAlign:\"center\",display:\"flex\",flexWrap:\"wrap\"}}>\r\n      \r\n        {mystate}\r\n        \r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ViewNFTs\r\n"],"sourceRoot":""}