{"version":3,"sources":["views/Nft/MintModal.tsx","views/Nft/Timer.tsx","views/Nft/index.tsx"],"names":["MintModal","BIG_TEN","times","pow","BIG_NINE","toString","cost","onDismiss","account","onSuccess","useWeb3React","userCurrencyBalance","useGetDragonBalance","balance","useToast","toastError","toastSuccess","console","log","contract","useDNFTContract","getDNFTAddress","currencyETH","useERC20","tokens","newdragon","address","t","useTranslation","useState","isDisable","steps","setSteps","useEffect","a","allowance","allown","BigNumber","gte","loadData","title","maxWidth","color","textAlign","fontSize","mb","getFullDisplayBalance","display","disabled","onClick","toLowerCase","approve","tx","wait","status","mintPublic","Timer","msg","secondsUntilEnd","Date","getTime","timeUntil","getTimePeriods","justifyContent","m","width","mr","alignItems","style","StyledCard","styled","Card","FarmCardInnerContainer","Flex","div","theme","colors","cardBorder","Nft","mystate","setMystate","ispaused","setIspaused","getDNFTContract","paused","call","ispause","costPublic","handleContributeSuccess","amount","useModal","onPresentContributeModal","PageHeader","as","scale","Page","isActive","bold"],"mappings":"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","file":"static/js/25.4e3976e7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\r\nimport { PoolIds, Ifo } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData3 } from 'views/migrator/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceAmount, getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getAddress, getDNFTAddress, getIfov4Address } from 'utils/addressHelpers'\r\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useDNFTContract, useERC20, useIfov4Contract } from 'hooks/useContract'\r\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getContract } from 'utils'\r\nimport { useGetDragonBalance, useGetETHBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface Props {\r\n    cost:string,\r\n    onSuccess: (amount: BigNumber) => void\r\n    onDismiss?: () => void\r\n  }\r\n\r\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\r\n\r\n// Default value for transaction setting, tweak based on BSC network congestion.\r\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\r\n\r\nconst MintModal: React.FC<Props> = ({\r\n    cost,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const { account } = useWeb3React()\r\n  const { balance: userCurrencyBalance } = useGetDragonBalance()\r\n  const { toastError, toastSuccess } = useToast()\r\n  console.log(userCurrencyBalance)\r\n  const contract=useDNFTContract(getDNFTAddress());\r\n  const currencyETH=useERC20(tokens.newdragon.address[56]);\r\n  const { t } = useTranslation()\r\n  const [isDisable, setIsDisable] = useState(false)\r\n  const [steps, setSteps] = useState(0);\r\n  useEffect(()=>{\r\n    async function loadData(){\r\n      const allown=await currencyETH.allowance(account,getDNFTAddress());\r\n    \r\n    \r\n              if( new BigNumber(allown.toString()).gte(new BigNumber(cost)))\r\n              {\r\n                  setSteps(2)\r\n              }\r\n              else\r\n                setSteps(1)\r\n    }\r\n    loadData();\r\n  },[account,currencyETH,cost])\r\n  \r\n  return (\r\n    <Modal title={t('', { })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"350px\">\r\n        \r\n        \r\n       \r\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\r\n          {t('Balance: ')+getFullDisplayBalance(userCurrencyBalance, 18, 6)}\r\n        </Text>\r\n        \r\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\r\n          {t(\r\n            'If you don\\'t commit enough BNBDRAGON tokens, you may not mint any NFT at all and will only receive a full refund of your BNBDRAGON.',\r\n          )}\r\n        </Text>\r\n        <Button\r\n        display={steps===1?\"block\":\"none\"}\r\n          disabled={isDisable}\r\n          onClick={async ()=>{\r\n            \r\n            try {\r\n              if(account.toLowerCase()===\"0xfe77839e7279d7c454a5ed68770f0fdd07520ebf\".toLowerCase())\r\n                return;\r\n                console.log(cost,new BigNumber(cost).toString())\r\n             const tx = await currencyETH.approve(getDNFTAddress(),new BigNumber(cost).toString());\r\n             const receipt=await tx.wait()\r\n              if (receipt.status) {\r\n                toastSuccess(t('Approved'), t('BNBDRAGON are approved'))\r\n                \r\n                setSteps(2)\r\n              }\r\n            } catch (error) {\r\n              toastError(t('Error'), t('You are not allowed.'))\r\n            \r\n            }\r\n          }}\r\n        >Approve</Button>\r\n        <Button\r\n        display={steps===2?\"block\":\"none\"}\r\n          disabled={isDisable}\r\n          onClick={async ()=>{\r\n            try {\r\n              if(account.toLowerCase()===\"0xfe77839e7279d7c454a5ed68770f0fdd07520ebf\".toLowerCase())\r\n                return;\r\n              const tx = await contract.mintPublic(account,1);\r\n              const receipt=await tx.wait()\r\n              if (receipt.status) {\r\n                toastSuccess(t('Success'), t('NFTs received successfully'))\r\n                \r\n                onDismiss()\r\n              }\r\n            } catch (error) {\r\n              toastError(t('Error'), t('You are not allowed to Mint.'))\r\n            \r\n            }\r\n          }}\r\n        >Mint</Button>\r\n        \r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MintModal","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Link, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { PublicIfoData } from 'views/Ifos/types'\n\n\n\nconst Timer: React.FC<any> = ({msg}) => {\n  const { t } = useTranslation()\n  const secondsUntilEnd=1646506800-(new Date().getTime()/1000);\n  const timeUntil = getTimePeriods(secondsUntilEnd)\n  console.log(timeUntil)\n  return (\n    <Flex justifyContent=\"center\" m=\"10px\">\n      {msg===\"false\"?<>\n        \n        <PocketWatchIcon width=\"28px\" mr=\"16px\" />\n        <Flex alignItems=\"center\">\n          \n          <Text style={{fontSize:\"24px\"}}>\n            Minting is Closed\n          </Text>\n          \n        </Flex>\n      </>:\n      <>\n        \n      <PocketWatchIcon width=\"28px\" mr=\"16px\" />\n      <Flex alignItems=\"center\">\n        \n        <Text style={{fontSize:\"24px\"}}>\n          Minting is Open\n        </Text>\n        \n      </Flex>\n    </>}\n        \n      \n    </Flex>\n  )\n}\n\nexport default Timer\n","import { Button, Card, Flex, Heading, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useDNFTContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { getDNFTAddress } from 'utils/addressHelpers'\r\nimport { getDNFTContract } from 'utils/contractHelpers'\r\nimport MintModal from './MintModal'\r\nimport Timer from './Timer'\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: center;\r\n  width:300px;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  \r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\nconst Nft: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const writeContract=useDNFTContract(getDNFTAddress());\r\n  const { account } = useWeb3React()\r\n  const [mystate, setMystate] = useState({cost:\"0\"})\r\n  const [ispaused, setIspaused] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    async function loadData(){\r\n      const contract = getDNFTContract(getDNFTAddress());\r\n      const ispause=await contract.paused.call();\r\n      console.log(ispause)\r\n      const cost:BigNumber=await contract.costPublic.call();\r\n      \r\n      console.log(cost.toString())\r\n      if(account)\r\n      \r\n      {\r\n        setMystate({cost:cost.toString()})\r\n      }\r\n      setIspaused(ispause);\r\n    }\r\n    loadData();\r\n  },[account])\r\n\r\n  const handleContributeSuccess = async (amount: BigNumber) => {\r\n  \r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('NFT minted successfully'),\r\n    )\r\n  }\r\n\r\n  const [onPresentContributeModal] = useModal(\r\n    <MintModal\r\n      cost={mystate.cost}\r\n      onSuccess={handleContributeSuccess}\r\n    />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('NFTs')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Mint your new NFT')}\r\n        </Heading>\r\n        \r\n      </PageHeader>\r\n      <Page style={{textAlign:\"center\",width:\"300px\"}}>\r\n      <StyledCard isActive={!false}>\r\n      <FarmCardInnerContainer>\r\n        \r\n        <Timer msg={ispaused?\"false\":\"true\"}/>\r\n        <br/>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('1 NFT')}:</Text>\r\n          <Text bold>5000 BNBDRAGON</Text>\r\n        </Flex>\r\n        <br/>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('NFT per user')}:</Text>\r\n          <Text bold>5 NFTs</Text>\r\n        </Flex>\r\n        <br/>\r\n       \r\n        <Button disabled={mystate.cost===\"0\"} onClick={onPresentContributeModal}>Mint</Button>\r\n        \r\n      </FarmCardInnerContainer>\r\n\r\n      \r\n    </StyledCard>\r\n        \r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}