{"version":3,"sources":["views/Nft/MintModal.tsx","views/Nft/Timer.tsx","views/Nft/index.tsx"],"names":["multiplierValues","MintModal","BIG_TEN","times","pow","BIG_NINE","toString","cost","qty","onDismiss","onSuccess","useState","value","setValue","account","useWeb3React","userCurrencyBalance","useGetDragonBalance","balance","useToast","toastError","toastSuccess","console","log","contract","useDNFTContract","getDNFTAddress","currencyETH","useERC20","tokens","newdragon","address","t","useTranslation","BigNumber","DEFAULT_TOKEN_DECIMAL","isDisable","setIsDisable","steps","setSteps","allownce","setAllownce","useEffect","a","allowance","allown","loadData","title","maxWidth","style","display","onUserInput","e","getDecimalAmount","lt","multipliedBy","lte","mb","color","textAlign","fontSize","getFullDisplayBalance","justifyContent","map","multiplierValue","index","scale","variant","onClick","Number","mr","length","disabled","toLowerCase","approve","tx","wait","status","mintPublic","Timer","msg","secondsUntilEnd","Date","getTime","timeUntil","getTimePeriods","m","width","alignItems","StyledCard","styled","Card","FarmCardInnerContainer","Flex","div","theme","colors","cardBorder","Nft","amountMint","setAmountMint","mystate","setMystate","ispaused","setIspaused","getDNFTContract","paused","call","ispause","costPublic","handleContributeSuccess","amount","useModal","onPresentContributeModal","PageHeader","as","Page","isActive","bold","marginLeft","type","marginRight","borderRadius","height","borderColor","fontWeight","lineHeight"],"mappings":"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","file":"static/js/25.bd12e977.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\r\nimport { PoolIds, Ifo } from 'config/constants/types'\r\nimport { WalletIfoData, PublicIfoData3 } from 'views/migrator/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceAmount, getDecimalAmount, getFullDisplayBalance } from 'utils/formatBalance'\r\nimport { getAddress, getDNFTAddress, getIfov4Address } from 'utils/addressHelpers'\r\nimport ApproveConfirmButtons from 'views/Profile/components/ApproveConfirmButtons'\r\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport { useDNFTContract, useERC20, useIfov4Contract } from 'hooks/useContract'\r\nimport { BIG_NINE, BIG_TEN } from 'utils/bigNumber'\r\nimport tokens from 'config/constants/tokens'\r\nimport { getContract } from 'utils'\r\nimport { useGetDragonBalance, useGetETHBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\n\r\ninterface Props {\r\n    cost:string,\r\n    qty:number,\r\n    onSuccess: (amount: BigNumber) => void\r\n    onDismiss?: () => void\r\n  }\r\n\r\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\r\n\r\n// Default value for transaction setting, tweak based on BSC network congestion.\r\nconst gasPrice = BIG_TEN.times(BIG_TEN.pow(BIG_NINE)).toString()\r\n\r\nconst MintModal: React.FC<Props> = ({\r\n    cost,\r\n    qty,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [value, setValue] = useState('')\r\n  const { account } = useWeb3React()\r\n  const { balance: userCurrencyBalance } = useGetDragonBalance()\r\n  const { toastError, toastSuccess } = useToast()\r\n  console.log(userCurrencyBalance)\r\n  const contract=useDNFTContract(getDNFTAddress());\r\n  const currencyETH=useERC20(tokens.newdragon.address[56]);\r\n  const { t } = useTranslation()\r\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\r\n  const [isDisable, setIsDisable] = useState(false)\r\n  const [steps, setSteps] = useState(0);\r\n  const [allownce, setAllownce] = useState(new BigNumber(-1));\r\n  useEffect(()=>{\r\n    async function loadData(){\r\n      const allown=await currencyETH.allowance(account,getDNFTAddress());\r\n      setAllownce(new BigNumber(allown.toString()))\r\n    }\r\n    loadData();\r\n  },[account,currencyETH])\r\n  \r\n  return (\r\n    <Modal title={t('', { })} onDismiss={onDismiss}>\r\n      <ModalBody maxWidth=\"350px\">\r\n        \r\n        \r\n        <BalanceInput\r\n        style={{display:allownce.toString()!==\"\"?\"block\":\"none\"}}\r\n          value={value}\r\n          onUserInput={async e=>{\r\n         console.log(allownce.toString(),e)\r\n            setValue(e);\r\n            setIsDisable(getDecimalAmount(new BigNumber(e),18).lt(new BigNumber(cost).multipliedBy(qty)));\r\n            \r\n             \r\n            \r\n            \r\n              if( getDecimalAmount(new BigNumber(e),18).lte(allownce))\r\n              {\r\n                  setSteps(2)\r\n              }\r\n              else\r\n                setSteps(1)\r\n           \r\n          }}\r\n          mb=\"8px\"\r\n        />\r\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\r\n          {t('Balance: ')+getFullDisplayBalance(userCurrencyBalance, 18, 6)}\r\n        </Text>\r\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\r\n          {multiplierValues.map((multiplierValue, index) => (\r\n            <Button\r\n              key={multiplierValue}\r\n              scale=\"xs\"\r\n              variant=\"tertiary\"\r\n              onClick={() => setValue((Number(getFullDisplayBalance(userCurrencyBalance,18, 6))*multiplierValue).toString())}\r\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\r\n            >\r\n              {multiplierValue * 100}%\r\n            </Button>\r\n          ))}\r\n        </Flex>\r\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\r\n          {t(\r\n            'If you don\\'t commit enough BNBDRAGON tokens, you may not mint any NFT at all and will only receive a full refund of your BNBDRAGON.',\r\n          )}\r\n        </Text>\r\n        <Button\r\n        display={steps===1?\"block\":\"none\"}\r\n          disabled={isDisable}\r\n          onClick={async ()=>{\r\n            \r\n            try {\r\n              if(account.toLowerCase()===\"0xfe77839e7279d7c454a5ed68770f0fdd07520ebf\".toLowerCase())\r\n                return;\r\n                console.log(cost,new BigNumber(cost).toString())\r\n             const tx = await currencyETH.approve(getDNFTAddress(),new BigNumber(cost).multipliedBy(qty).toString());\r\n             const receipt=await tx.wait()\r\n              if (receipt.status) {\r\n                toastSuccess(t('Approved'), t('BNBDRAGON are approved'))\r\n                \r\n                setSteps(2)\r\n              }\r\n            } catch (error) {\r\n              toastError(t('Error'), t('You are not allowed.'))\r\n            \r\n            }\r\n          }}\r\n        >Approve</Button>\r\n        <Button\r\n        display={steps===2?\"block\":\"none\"}\r\n          disabled={isDisable}\r\n          onClick={async ()=>{\r\n            try {\r\n              console.log(value)\r\n              if(account.toLowerCase()===\"0xfe77839e7279d7c454a5ed68770f0fdd07520ebf\".toLowerCase())\r\n                return;\r\n              const tx = await contract.mintPublic(account,qty);\r\n              const receipt=await tx.wait()\r\n              if (receipt.status) {\r\n                toastSuccess(t('Success'), t('NFTs received successfully'))\r\n                \r\n                onDismiss()\r\n              }\r\n            } catch (error) {\r\n              toastError(t('Error'), t('You are not allowed to Mint.'))\r\n            \r\n            }\r\n          }}\r\n        >Mint</Button>\r\n        \r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default MintModal","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { Flex, Link, PocketWatchIcon, Text, Skeleton } from '@pancakeswap/uikit'\nimport getTimePeriods from 'utils/getTimePeriods'\nimport { PublicIfoData } from 'views/Ifos/types'\n\n\n\nconst Timer: React.FC<any> = ({msg}) => {\n  const { t } = useTranslation()\n  const secondsUntilEnd=1646506800-(new Date().getTime()/1000);\n  const timeUntil = getTimePeriods(secondsUntilEnd)\n  console.log(timeUntil)\n  return (\n    <Flex justifyContent=\"center\" m=\"10px\">\n      {msg===\"false\"?<>\n        \n        <PocketWatchIcon width=\"28px\" mr=\"16px\" />\n        <Flex alignItems=\"center\">\n          \n          <Text style={{fontSize:\"24px\"}}>\n            Minting is Closed\n          </Text>\n          \n        </Flex>\n      </>:\n      <>\n        \n      <PocketWatchIcon width=\"28px\" mr=\"16px\" />\n      <Flex alignItems=\"center\">\n        \n        <Text style={{fontSize:\"24px\"}}>\n          Minting is Open\n        </Text>\n        \n      </Flex>\n    </>}\n        \n      \n    </Flex>\n  )\n}\n\nexport default Timer\n","import { Button, Card, Flex, Heading, Text, useModal } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport Page from 'components/Layout/Page'\r\nimport PageHeader from 'components/PageHeader'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useDNFTContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { getDNFTAddress } from 'utils/addressHelpers'\r\nimport { getDNFTContract } from 'utils/contractHelpers'\r\nimport MintModal from './MintModal'\r\nimport Timer from './Timer'\r\n\r\nconst StyledCard = styled(Card)`\r\n  align-self: center;\r\n  width:300px;\r\n`\r\n\r\nconst FarmCardInnerContainer = styled(Flex)`\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  \r\n  padding: 24px;\r\n`\r\n\r\nconst ExpandingWrapper = styled.div`\r\n  padding: 24px;\r\n  border-top: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  overflow: hidden;\r\n`\r\n\r\nconst Nft: React.FC = () => {\r\n  const { t } = useTranslation()\r\n  const [amountMint, setAmountMint] = useState(1);\r\n  const { toastError, toastSuccess } = useToast()\r\n  const writeContract=useDNFTContract(getDNFTAddress());\r\n  const { account } = useWeb3React()\r\n  const [mystate, setMystate] = useState({cost:\"0\"})\r\n  const [ispaused, setIspaused] = useState(false);\r\n\r\n  useEffect(()=>{\r\n    async function loadData(){\r\n      const contract = getDNFTContract(getDNFTAddress());\r\n      const ispause=await contract.paused.call();\r\n      console.log(ispause)\r\n      const cost:BigNumber=await contract.costPublic.call();\r\n      \r\n      console.log(cost.toString())\r\n      if(account)\r\n      \r\n      {\r\n        setMystate({cost:cost.toString()})\r\n      }\r\n      setIspaused(ispause);\r\n    }\r\n    loadData();\r\n  },[account])\r\n\r\n  const handleContributeSuccess = async (amount: BigNumber) => {\r\n  \r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('You have contributed to this IFO!'),\r\n    )\r\n  }\r\n\r\n  const [onPresentContributeModal] = useModal(\r\n    <MintModal\r\n      cost={mystate.cost}\r\n      qty={amountMint}\r\n      onSuccess={handleContributeSuccess}\r\n    />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <PageHeader>\r\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\r\n          {t('NFTs')}\r\n        </Heading>\r\n        <Heading scale=\"lg\" color=\"text\">\r\n          {t('Mint your new NFT')}\r\n        </Heading>\r\n        \r\n      </PageHeader>\r\n      <Page style={{textAlign:\"center\",width:\"300px\"}}>\r\n      <StyledCard isActive={!false}>\r\n      <FarmCardInnerContainer>\r\n        \r\n        <Timer msg={ispaused?\"false\":\"true\"}/>\r\n        <br/>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('1 NFT')}:</Text>\r\n          <Text bold>5000 BNBDRAGON</Text>\r\n        </Flex>\r\n        <br/>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{t('Max mint amount')}:</Text>\r\n          <Text bold>5 NFT</Text>\r\n        </Flex>\r\n        <br/>\r\n        <div style={{display:\"block\", width:\"300px\",textAlign:\"center\"}}>\r\n                   <div style={{display:\"flex\", width:\"260px\",marginLeft:\"30px\",textAlign:\"center\"}}>\r\n                    <button  type='button' style={{marginLeft:\"30px\",marginRight:\"30px\",borderRadius:\"10px\",width:\"30px\",height:\"30px\",borderColor:\"#fff\", fontSize:\"15px\",fontWeight:\"bolder\"}} onClick={()=>{\r\n                      if(amountMint>1)\r\n                      setAmountMint(amountMint-1)\r\n                    }}>-</button>\r\n                   \r\n                    <p style={{ fontSize:\"15px\",marginRight:\"30px\",fontWeight:\"bolder\",lineHeight:\"2\"}}>{amountMint}</p>\r\n                 \r\n                    <button style={{borderRadius:\"10px\",width:\"30px\",height:\"30px\",marginRight:\"30px\",borderColor:\"#fff\", fontSize:\"15px\",fontWeight:\"bolder\"}} type='button' onClick={()=>{\r\n                      if(amountMint<5)\r\n                      setAmountMint(amountMint+1)\r\n                    }}>+</button>\r\n                </div>\r\n                </div>\r\n        <br/>\r\n        <Button disabled={mystate.cost===\"0\"} onClick={onPresentContributeModal}>Mint</Button>\r\n        \r\n      </FarmCardInnerContainer>\r\n\r\n      \r\n    </StyledCard>\r\n        \r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Nft\r\n"],"sourceRoot":""}